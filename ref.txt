Spring Framework-

Spring Framework open source framework for building enterprise java application

aims to simplify the complex enterprise java application dev

lightweight

spring consists of spring web flow, spring mvc,spring orm

Core features-
IOC-inversion on control container
AOP-aspect oriented programming
DAF-Data access Framework
MVC-Spring MVC Framework

Spring bean-
an object that is managed by the spring framework in a java application

can be configured using java code

bean life cycle is managed by the spring container

Configuration example-

@configuration declares class as "full" configuration class
class must be non-final and public

@bean declares bean config inside config class

method must be non-final and non-private

@Configuration
public classs AppConfig{
    @Bean 
    public PaymentService paymentService(
        AccountRepository accountRepository
    )
    {
        return new PaymentServiceImpl(accountRepository());
    }
}

Spring Component Sample-
Spring Component contains class-level annotation that marks class as a Spring Component(@Component)

Construtor-dependency injection is automatically done using @Autowired by injecting the constructor  parameters

@autowired on Construtor is optional if there is only one constructor

Spring provides component stereotype to classify classes as spring components
->sub-types are available as a refinement for the standard components

@Component as a general component annotation indicating that the class should be initialized,configured and managed by the core container.

@Repository, @Service and @Controller as meta-annotation for @Component that allows to further re-fine components
to name bean  @Bean("ds")

Dependency Injection-
Constructor Injection
Field Injection
Configuration Methods
Setter Methods Injection


Bean Scope-
Spring Provides multiple scopes
Singleton is the default scope of a bean


scopes-
Singleton
prototype
request
session
application
websocket

@Scope("prototype")

Bean Environment-
Environment Abstraction-
Injectable-

Bean Profile-
@Profile("cloud")

@value annotation
@PropertySource
@Value()

Day-2
.mvn folder is for maven
we dont have to separately download maven
a wrapper folder is there which enables us to use maven


profiles are made for different stages dev test prod
for each profile different env variables are set.
Day-3

Learn how to make REST API in java Springboot
RequestBody annotation is used for sending a body

Day-4
Dbeaver can be used for Database connecting databases
Day-5
JPA used for persisting java objects in Databases

The @Component annotation
We can use @Component annotation in our application to declare any class as the Spring’s managed components. Spring internally picks up and registers beans with @Component and doesn’t look for @Service and @Repository in general. Because the @Service and @Repository are also annotated with @Component.

The @Component annotation is a generic stereotype annotation used to designate any Spring-managed component.
It indicates that the annotated class is a candidate for auto-detection and bean registration during the component scanning process.
It’s a general-purpose annotation and can be used to annotate any class that should be managed by the Spring container.


The @Service annotation is also a specialization of @Component and is used to annotate classes that perform a specific service or business logic.
It indicates that the annotated class is a service component, responsible for implementing business logic or coordinating the application’s workflow.
It’s commonly used in service layer classes within the application.

The @Repository annotation is a specialization of @Component and is used to annotate classes that serve as data access objects (DAOs) or repositories.
It indicates that the annotated class is a repository, typically responsible for encapsulating data access logic such as CRUD operations on a database.
It’s often used in combination with Spring’s data access technologies like Spring Data JPA or Spring JDBC.
Any class that holds the database or persistent logic is annotated with @Repository. In other words, the DTO/DAO is annotated with @Repository with an optional name parameter


